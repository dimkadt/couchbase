{
  "jpsType": "update",
  "jpsVersion": "0.99",
  "id": "couchbase-auto-cluster",
  "name": "Auto Scalable Couchbase Cluster",
  "globals": {
    "user": "admin",
    "pswd": "${fn.password}"
  },
  "baseUrl": "https://raw.githubusercontent.com/dimkadt/couchbase/master/certified",
  "nodeGroupAlias": {
    "${targetNodes.nodeGroup}": "nosqldb"
  },
  "onInstall": {
    "forEach(nodes.nosqldb)": {
      "if (${@i.ismaster})": {
        "install": {
          "settings": {
            "masterId": "${@i.id}"
          },
          "jps": {
            "type": "update",
            "name": "auto-cluster",
            "envName": "${env.envName}",
            "nodeGroupAlias": {
              "${targetNodes.nodeGroup}": "nosqldb"
            },
            "onInstall": [
              {
                "forEach(clnode:nodes.nosqldb)": {
                  "cleanup-node": {
                    "id": "${@clnode.id}"
                  }
                }
              },
              {
                "cmd": {
                  "nodeId": "${settings.masterId}",
                  "user": "root",
                  "commands": [
                    "cluster_init"
                  ]
                }
              },
              {
                "forEach(clnode:nodes.nosqldb)": {
                  "if (${@clnode.id} != ${settings.masterId})": {
                    "add-node": {
                      "id": "${settings.masterId}",
                      "address": "${@clnode.address}"
                    }
                  }
                }
              },
              {
                "if (nodes.nosqldb.length > 1)": [
                  {
                    "rebalance": {
                      "id": "${settings.masterId}"
                    }
                  }
                ]
              },
              {
                "cmd": {
                  "nodeId": "${settings.masterId}",
                  "user": "root",
                  "commands": [
                    "migrate_data"
                  ]
                }
              },
              {
                "compareVersion": "1.6.1"
              },
              {
                "if (${response.compareResult} >= 0)": {
                  "cmd": {
                    "nodeId": "${settings.masterId}",
                    "user": "root",
                    "commands": [
                      "jem passwd set -p ${globals.pswd}"
                    ]
                  },
                  "return": {
                    "result": "success",
                    "email": "Use the data below for admin access: Web Console: ${nodes.nosqldb.first.url}/ui/index.html User: ${globals.user} Password: ${globals.pswd}"
                  }
                }
              }
            ],
            "onAfterScaleOut[nosqldb]": [
              {
                "if (nodes.nosqldb.length > 1)": [
                  {
                    "forEach(clnode:event.response.nodes)": {
                      "add-node": {
                        "id": "${settings.masterId}",
                        "address": "${@clnode.address}"
                      }
                    }
                  },
                  {
                    "rebalance": {
                      "id": "${settings.masterId}"
                    }
                  }
                ]
              }
            ],
            "onBeforeScaleIn[nosqldb]": [
              {
                "forEach(clnode:event.response.nodes)": {
                  "remove-node": {
                    "id": "${settings.masterId}",
                    "address": "${@clnode.address}"
                  }
                }
              },
              {
                "rebalance": {
                  "id": "${settings.masterId}"
                }
              }
            ],
            "actions": {
              "compareVersion": {
                "script": "function compareVersions(a, b) {\n    a = a.split(\".\"); b = b.split(\".\");\n    for (var i = 0, l = Math.max(a.length, b.length), x, y; i < l; i++) {x = parseInt(a[i], 10) || 0; y = parseInt(b[i], 10) || 0; if (x != y) return x > y ? 1 : -1 }\n    return 0;\n}\n\nvar resp = jelastic.dev.scripting.Eval(\"appstore\", session, \"GetEngineVersion\");      \nvar engineVersion = resp.response.version;\n\nreturn { \n  result : 0, \n  compareResult : compareVersions(engineVersion, '${this}') \n};\n"
              },
              "add-node": {
                "cmd[${this.id}]": {
                  "user": "root",
                  "commands": [
                    "retries=30; while [ $retries -gt 0 ]; do couchbase-cli server-add -c 127.0.0.1:8091 -u ${globals.user} -p $(couchpass) --server-add=${this.address}:8091 --server-add-username=${globals.user} --server-add-password=$(couchpass) --services=data,index,query,fts &>/dev/null; [ \"$?\" == 0 ] && break; let retries=${retries}-1; sleep 4; done;"
                  ]
                }
              },
              "remove-node": {
                "cmd[${this.id}]": {
                  "user": "root",
                  "commands": [
                    "couchbase-cli rebalance -c 127.0.0.1:8091 -u ${globals.user} -p $(couchpass) --server-remove=${this.address}"
                  ]
                }
              },
              "rebalance": {
                "cmd[${this.id}]": {
                  "user": "root",
                  "commands": [
                    "rebalance_cluster"
                  ]
                }
              },
              "cleanup-node": {
                "cmd[${this.id}]": {
                  "user": "root",
                  "commands": [
                    "node_cleanup"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "success": "success"
  },
  "onAfterClone": [
    {
      "api": "environment.control.SendEnvCreatedEmail",
      "appid": "${event.response.env.appid}",
      "isImport": true
    },
    {
      "install": {
        "jps": "${baseUrl}/manifest.jps?_r=${fn.random}",
        "envName": "${event.response.env.envName}",
        "nodeGroup": "nosqldb"
      }
    }
  ]
}
